#include <Arduino.h>
#include <TinyGPSPlus.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_LittleFS.h>
#include <InternalFileSystem.h>
#include "Adafruit_TinyUSB.h"
#include "tusb.h"
using namespace Adafruit_LittleFS_Namespace;

static const int RXPin = PIN_008, TXPin = PIN_006;
static const uint32_t GPSBaud = 38400;

bool usbMounted = false;

bool checkActive = false;

#define SECTOR_SIZE 512
#define RAM_DISK_SECTORS (RAM_DISK_SIZE / SECTOR_SIZE)

#define FAT_START_SECTOR 1
#define FAT_SECTORS 1
#define ROOT_DIR_START_SECTOR (FAT_START_SECTOR + FAT_SECTORS)
#define ROOT_DIR_ENTRIES 16
#define ROOT_DIR_SECTORS ((ROOT_DIR_ENTRIES * 32 + SECTOR_SIZE - 1) / SECTOR_SIZE)
#define DATA_START_SECTOR (ROOT_DIR_START_SECTOR + ROOT_DIR_SECTORS)
#define CLUSTER_SIZE 1

const char TRACK_FILENAME[11] = {'T', 'R', 'A', 'C', 'K', ' ', ' ', ' ', 'G', 'P', 'X'};

uint32_t gpxFileSize = 0;

#define MBR_SECTOR 0
#define FAT_SECTOR FAT_START_SECTOR
#define ROOT_DIR_SECTOR ROOT_DIR_START_SECTOR
#define DATA_SECTOR DATA_START_SECTOR

#define BUTTON_UP_PIN PIN_031
#define BUTTON_DOWN_PIN PIN_029
unsigned long lastActivityTime = 0;
unsigned long lastPinInputTime = 0;
unsigned long lastGPXLog = 0;
unsigned long buttonHoldStart = 0;
bool isHolding = false;

const unsigned long INACTIVITY_TIMEOUT = 60000;
const unsigned long GPX_LOG_INTERVAL = 300000;
const unsigned long SLEEP_HOLD_DURATION = 5000;

Adafruit_SSD1306 display(128, 64, &Wire, -1);
int inputIndex = 0;
int currentPage = 0;
const unsigned long debounceDelay = 200;
unsigned long lastDebounce = 0;

TinyGPSPlus gps;
SoftwareSerial ss(RXPin, TXPin);

double maxSpeed = 0.0;
double totalDistance = 0.0;
double lastLat = 0.0, lastLon = 0.0;
bool firstFix = true;
bool usbConnected = false;

#define RAM_DISK_SIZE 16 * 1024
static uint8_t ram_disk[RAM_DISK_SIZE];
Adafruit_USBD_MSC usb_msc;

void initRAMDisk()
{
  memset(ram_disk, 0, RAM_DISK_SIZE);

  uint8_t *mbr = ram_disk + (MBR_SECTOR * SECTOR_SIZE);

  mbr[0] = 0xEB;
  mbr[1] = 0x3C;
  mbr[2] = 0x90;

  memcpy(mbr + 3, "MSDOS5.0", 8);

  mbr[11] = 0x00;
  mbr[12] = 0x02;

  mbr[13] = CLUSTER_SIZE;

  mbr[14] = 0x01;
  mbr[15] = 0x00;

  mbr[16] = 0x01;

  mbr[17] = ROOT_DIR_ENTRIES & 0xFF;
  mbr[18] = (ROOT_DIR_ENTRIES >> 8) & 0xFF;

  mbr[19] = RAM_DISK_SECTORS & 0xFF;
  mbr[20] = (RAM_DISK_SECTORS >> 8) & 0xFF;

  mbr[21] = 0xF8;

  mbr[22] = FAT_SECTORS;
  mbr[23] = 0x00;

  mbr[24] = 0x20;
  mbr[25] = 0x00;
  mbr[26] = 0x40;
  mbr[27] = 0x00;

  mbr[28] = 0x00;
  mbr[29] = 0x00;
  mbr[30] = 0x00;
  mbr[31] = 0x00;

  mbr[36] = 0x80;
  mbr[38] = 0x29;

  mbr[39] = 0x12;
  mbr[40] = 0x34;
  mbr[41] = 0x56;
  mbr[42] = 0x78;

  memcpy(mbr + 43, "NiceGPS  ", 11);

  memcpy(mbr + 54, "FAT12   ", 8);

  mbr[510] = 0x55;
  mbr[511] = 0xAA;

  uint8_t *fat = ram_disk + (FAT_SECTOR * SECTOR_SIZE);

  fat[0] = 0xF8;
  fat[1] = 0xFF;
  fat[2] = 0xFF;

  fat[3] = 0xFF;
  fat[4] = 0x0F;

  uint8_t *root = ram_disk + (ROOT_DIR_SECTOR * SECTOR_SIZE);
  memset(root, 0, ROOT_DIR_SECTORS * SECTOR_SIZE);

  memcpy(root, TRACK_FILENAME, 11);
  root[11] = 0x20;

  root[26] = 0x02;
  root[27] = 0x00;

  root[28] = 0x00;
  root[29] = 0x00;
  root[30] = 0x00;
  root[31] = 0x00;
}

void updateRAMDiskWithGPX()
{
  File gpx = InternalFS.open("/track.gpx", FILE_O_READ);
  if (!gpx)
  {
    Serial.println("GPX file not found");
    gpxFileSize = 0;

    memset(ram_disk + (DATA_SECTOR * SECTOR_SIZE), 0, RAM_DISK_SIZE - (DATA_SECTOR * SECTOR_SIZE));
    return;
  }

  gpxFileSize = gpx.size();

  uint32_t maxFileSize = (RAM_DISK_SIZE - (DATA_SECTOR * SECTOR_SIZE));
  if (gpxFileSize > maxFileSize)
    gpxFileSize = maxFileSize;

  gpx.read(ram_disk + (DATA_SECTOR * SECTOR_SIZE), gpxFileSize);
  gpx.close();

  uint8_t *root = ram_disk + (ROOT_DIR_SECTOR * SECTOR_SIZE);
  root[28] = (uint8_t)(gpxFileSize & 0xFF);
  root[29] = (uint8_t)((gpxFileSize >> 8) & 0xFF);
  root[30] = (uint8_t)((gpxFileSize >> 16) & 0xFF);
  root[31] = (uint8_t)((gpxFileSize >> 24) & 0xFF);
}

void checkUSBMount()
{
  bool mountedNow = tud_ready();

  if (mountedNow && !usbMounted)
  {
    updateRAMDiskWithGPX();
  }
  usbMounted = mountedNow;
}

void setupUSBMSC()
{
  usb_msc.setID("ICMT.CC", "NiceGPS", "0.01");

  usb_msc.setReadWriteCallback(
      [](uint32_t lba, void *buffer, uint32_t bufsize) -> int32_t
      {
        if ((lba + bufsize / 512) > RAM_DISK_SECTORS)
        {
          return -1;
        }
        memcpy(buffer, ram_disk + lba * 512, bufsize);
        return bufsize;
      },
      [](uint32_t lba, uint8_t *buffer, uint32_t bufsize) -> int32_t
      {
        return bufsize;
      },
      []() {});

  usb_msc.setCapacity(RAM_DISK_SECTORS, SECTOR_SIZE);
  usb_msc.setUnitReady(true);

  usb_msc.begin();
}

float readBatteryVoltage()
{
  volatile uint32_t raw_value = 0;
  NRF_SAADC->ENABLE = 1;
  NRF_SAADC->RESOLUTION = SAADC_RESOLUTION_VAL_12bit;
  NRF_SAADC->CH[0].CONFIG =
      (SAADC_CH_CONFIG_GAIN_Gain1_4 << SAADC_CH_CONFIG_GAIN_Pos) |
      (SAADC_CH_CONFIG_MODE_SE << SAADC_CH_CONFIG_MODE_Pos) |
      (SAADC_CH_CONFIG_REFSEL_Internal << SAADC_CH_CONFIG_REFSEL_Pos);
  NRF_SAADC->CH[0].PSELP = SAADC_CH_PSELP_PSELP_VDDHDIV5;
  NRF_SAADC->CH[0].PSELN = SAADC_CH_PSELN_PSELN_NC;
  NRF_SAADC->RESULT.PTR = (uint32_t)&raw_value;
  NRF_SAADC->RESULT.MAXCNT = 1;
  NRF_SAADC->TASKS_START = 1;
  while (!NRF_SAADC->EVENTS_STARTED)
    ;
  NRF_SAADC->EVENTS_STARTED = 0;
  NRF_SAADC->TASKS_SAMPLE = 1;
  while (!NRF_SAADC->EVENTS_END)
    ;
  NRF_SAADC->EVENTS_END = 0;
  NRF_SAADC->TASKS_STOP = 1;
  while (!NRF_SAADC->EVENTS_STOPPED)
    ;
  NRF_SAADC->EVENTS_STOPPED = 0;
  NRF_SAADC->ENABLE = 0;
  double step2 = ((double)raw_value * 2.4) / 4095.0;
  double vddh = 5.0 * step2;
  return (float)vddh;
}

void drawBatteryIcon(float voltage)
{
  const int iconX = 128 - 18;
  const int iconY = 0;
  const int iconWidth = 16;
  const int iconHeight = 6;
  const int terminalWidth = 2;
  display.drawRect(iconX, iconY, iconWidth, iconHeight, SSD1306_WHITE);
  display.fillRect(iconX + iconWidth, iconY + 2, terminalWidth, iconHeight - 4, SSD1306_WHITE);
  float minV = 3.0;
  float maxV = 4.2;
  bool isCharging = (voltage >= 4.3);
  if (isCharging)
  {
    int animPhase = (millis() / 150) % (iconWidth - 4 + 1);
    display.fillRect(iconX + 2, iconY + 2, animPhase, iconHeight - 4, SSD1306_WHITE);
  }
  else
  {
    int fillWidth = (int)((voltage - minV) / (maxV - minV) * (iconWidth - 4));
    fillWidth = constrain(fillWidth, 0, iconWidth - 4);
    if (fillWidth > 0)
      display.fillRect(iconX + 2, iconY + 2, fillWidth, iconHeight - 4, SSD1306_WHITE);
  }
}

void initGPXFile()
{
  if (!InternalFS.exists("/track.gpx"))
  {
    File g = InternalFS.open("/track.gpx", FILE_O_WRITE);
    if (g)
    {
      g.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
      g.println("<gpx version=\"1.1\" creator=\"icmt.cc GPS\">");
      g.println("<trk><name>Track</name><trkseg>");
      g.close();
    }
  }
}

void logGPXPoint()
{
  if (!gps.location.isValid() || !gps.time.isValid())
    return;
  File f = InternalFS.open("/track.gpx", FILE_O_WRITE);
  if (f)
  {
    f.seek(f.size());
    f.print("<trkpt lat=\"");
    f.print(gps.location.lat(), 6);
    f.print("\" lon=\"");
    f.print(gps.location.lng(), 6);
    f.println("\">");
    f.print("  <ele>");
    f.print(gps.altitude.meters(), 1);
    f.println("</ele>");
    f.print("  <time>");
    char tb[25];
    sprintf(tb, "%04d-%02d-%02dT%02d:%02d:%02dZ",
            gps.date.year(), gps.date.month(), gps.date.day(),
            gps.time.hour(), gps.time.minute(), gps.time.second());
    f.print(tb);
    f.println("</time></trkpt>");
    f.close();
  }
}

void enterUltraSleep()
{
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Sleep Mode");
  display.display();
  delay(1000);
  display.ssd1306_command(SSD1306_DISPLAYOFF);
  digitalWrite(PIN_013, LOW);
  NRF_POWER->SYSTEMOFF = 1;
  while (true)
  {
  }
}

void closeGPXFile()
{
  File f = InternalFS.open("/track.gpx", FILE_O_WRITE);
  if (f)
  {
    f.seek(f.size());
    f.println("</trkseg></trk></gpx>");
    f.close();
  }
}

void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do
  {
    while (ss.available())
      gps.encode(ss.read());
  } while (millis() - start < ms);
}

void checkButtons()
{
  static bool lastUp = HIGH, lastDown = HIGH;
  bool up = digitalRead(BUTTON_UP_PIN);
  bool down = digitalRead(BUTTON_DOWN_PIN);

  if ((up == LOW || down == LOW) && !isHolding)
  {
    buttonHoldStart = millis();
    isHolding = true;
  }
  if (isHolding && (up == HIGH && down == HIGH))
  {
    isHolding = false;
  }
  if (isHolding && millis() - buttonHoldStart >= SLEEP_HOLD_DURATION)
  {
    closeGPXFile();
    enterUltraSleep();
  }

  if ((up == LOW && lastUp == HIGH) || (down == LOW && lastDown == HIGH))
  {
    lastActivityTime = millis();
    if (millis() - lastDebounce > debounceDelay)
    {
      if (up == LOW)
        currentPage = (currentPage + 1) % 6;
      if (down == LOW)
        currentPage = (currentPage + 5) % 6;
      lastDebounce = millis();
    }
  }
  lastUp = up;
  lastDown = down;
}

void updateStats()
{
  if (gps.location.isValid())
  {
    double currentLat = gps.location.lat();
    double currentLon = gps.location.lng();
    if (!firstFix)
    {
      double dist = TinyGPSPlus::distanceBetween(lastLat, lastLon, currentLat, currentLon);
      totalDistance += dist / 1000.0;
    }
    else
    {
      firstFix = false;
    }
    lastLat = currentLat;
    lastLon = currentLon;
  }
  if (gps.speed.isValid())
  {
    double spd = gps.speed.kmph();
    if (spd > maxSpeed)
      maxSpeed = spd;
  }
}

void drawSpeedLargePage()
{
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, 20);
  display.print("Speed: ");
  display.print(gps.speed.kmph(), 1);
  display.print("km/h");
  drawBatteryIcon(readBatteryVoltage());
  display.display();
}

void drawUSBPage()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("USB Mode");
  if (TinyUSBDevice.mounted())
  {
    display.setCursor(0, 16);
    display.println("Drive Active:");
    display.println("/track.gpx");
  }
  else
  {
    display.setCursor(0, 16);
    display.println("No USB Host");
  }
  drawBatteryIcon(readBatteryVoltage());
  display.display();
}

void drawMainPage()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("Main GPS Info");

  display.setCursor(0, 12);
  display.print("Fix: ");
  display.println(gps.location.isValid() ? "Yes" : "No");

  display.print("Sats: ");
  display.println(gps.satellites.isValid() ? gps.satellites.value() : 0);

  display.print("Lat: ");
  display.println(gps.location.lat(), 6);

  display.print("Lng: ");
  display.println(gps.location.lng(), 6);

  float batteryVoltage = readBatteryVoltage();
  drawBatteryIcon(batteryVoltage);

  display.display();
}

void drawAdvancedPage()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("Advanced GPS Data");

  display.setCursor(0, 12);
  display.print("Alt: ");
  display.println(gps.altitude.meters(), 1);

  display.print("HDOP: ");
  display.println(gps.hdop.hdop(), 1);

  display.print("Heading: ");
  display.println(gps.course.deg(), 1);

  display.print("Fix Age: ");
  display.println(gps.location.age());

  float batteryVoltage = readBatteryVoltage();
  drawBatteryIcon(batteryVoltage);

  display.display();
}

void drawSpeedPage()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("Speed & Distance");

  display.setCursor(0, 12);
  display.print("Speed: ");
  display.println(gps.speed.kmph(), 2);

  display.print("Max: ");
  display.println(maxSpeed, 2);

  display.print("Dist (km): ");
  display.println(totalDistance, 2);

  float batteryVoltage = readBatteryVoltage();
  drawBatteryIcon(batteryVoltage);

  display.display();
}

void drawTimePage()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("UTC Time / Date");

  display.setCursor(0, 16);
  if (gps.time.isValid())
  {
    char buf[16];
    sprintf(buf, "%02d:%02d:%02d", gps.time.hour(), gps.time.minute(), gps.time.second());
    display.println(buf);
  }
  else
  {
    display.println("Time: No Fix");
  }

  display.setCursor(0, 32);
  if (gps.date.isValid())
  {
    char dateBuf[16];
    sprintf(dateBuf, "%02d/%02d/%04d", gps.date.day(), gps.date.month(), gps.date.year());
    display.println(dateBuf);
  }
  else
  {
    display.println("Date: No Fix");
  }

  float batteryVoltage = readBatteryVoltage();
  drawBatteryIcon(batteryVoltage);

  display.display();
}

void configureWakeupButtons()
{
  nrf_gpio_cfg_sense_input(BUTTON_UP_PIN, NRF_GPIO_PIN_PULLUP, NRF_GPIO_PIN_SENSE_LOW);
  nrf_gpio_cfg_sense_input(BUTTON_DOWN_PIN, NRF_GPIO_PIN_PULLUP, NRF_GPIO_PIN_SENSE_LOW);
}

void setup()
{
  Serial.begin(115200);
  pinMode(PIN_013, OUTPUT);
  digitalWrite(PIN_013, HIGH);
  delay(1000);
  pinMode(BUTTON_UP_PIN, INPUT_PULLUP);
  pinMode(BUTTON_DOWN_PIN, INPUT_PULLUP);

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("NiceGPS\nStarting...");
  display.display();

  InternalFS.begin();
  initGPXFile();
  initRAMDisk();


  configureWakeupButtons();
  ss.begin(GPSBaud);

  TinyUSBDevice.begin();
  setupUSBMSC();


  lastActivityTime = millis();
  lastGPXLog = millis();
}

void loop()
{
  checkUSBMount();

  smartDelay(100);
  checkButtons();
  updateStats();

  switch (currentPage)
  {
  case 0:
    drawMainPage();
    break;
  case 1:
    drawAdvancedPage();
    break;
  case 2:
    drawSpeedPage();
    break;
  case 3:
    drawTimePage();
    break;
  case 4:
    drawUSBPage();
    break;
  case 5:
    drawSpeedLargePage();
    break;
  }

  if (millis() - lastGPXLog > GPX_LOG_INTERVAL)
  {
    logGPXPoint();
    lastGPXLog = millis();
  }

  if (millis() - lastActivityTime > INACTIVITY_TIMEOUT)
  {
    display.ssd1306_command(SSD1306_DISPLAYOFF);
  }

  if (digitalRead(BUTTON_UP_PIN) == LOW || digitalRead(BUTTON_DOWN_PIN) == LOW)
  {
    display.ssd1306_command(SSD1306_DISPLAYON);
  }

  if (currentPage == 4 && !checkActive)
  {
    usb_msc.setUnitReady(true);
    checkActive = true;
  } else if (currentPage != 4 && checkActive)
  {
    usb_msc.setUnitReady(false);
    checkActive = false;
    
  }

  
}
